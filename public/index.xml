<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>thoughts.theden.sh</title><link>https://theden.github.io/thoughts.theden.sh/</link><description>Recent content on thoughts.theden.sh</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://theden.github.io/thoughts.theden.sh/index.xml" rel="self" type="application/rss+xml"/><item><title>M1 MacBooks and Drive Wear</title><link>https://theden.github.io/thoughts.theden.sh/posts/macbook-disks/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/macbook-disks/</guid><description>Typically, to find the overall wear of a MacBook drive, one installs smartctl from smartmontools via brew install smartmontools or sudo port install smartmontools
Then by looking at the Percentage Used from the output of smartctl -a /dev/disk0
=== START OF SMART DATA SECTION === SMART overall-health self-assessment test result: PASSED SMART/Health Information (NVMe Log 0x02) Critical Warning: 0x00 Temperature: 39 Celsius Available Spare: 100% Available Spare Threshold: 99% Percentage Used: 0% Data Units Read: 48,035,261 [24.</description></item><item><title>Kube Tricks</title><link>https://theden.github.io/thoughts.theden.sh/posts/kube-tricks/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/kube-tricks/</guid><description>Ephemeral Debug Containers One can use ephemeral debug containers
Alternatively to edit in-place to test out configs and env vars use kubectl edit to modify a pod (or Deployment, StatefulSet etc.) YAML to update the command to do nothing so one can kubectl exec into the pod
apiVersion:v1kind:Podmetadata:name:unstable-podspec:containers:- name:unstable-podimage:foobarcommand:- sh- -c- &amp;#34;tail -f /dev/null&amp;#34;Ensure liveness and readiness probes are commented out if it depends on a runtime condition.
Utilising podmanagementpolicy Mostly used for StatefulSets.</description></item><item><title>Changing Your PS1's Prompt Based on The Previous Command's Return Value</title><link>https://theden.github.io/thoughts.theden.sh/posts/ps1-colour/</link><pubDate>Fri, 25 Jun 2021 21:17:06 +1000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/ps1-colour/</guid><description>You may find it useful for your PS1 to signal if a previous command returned 0 or not. One neat way to do this that doesn&amp;rsquo;t add clutter is to have your PS1 change colour based on the previous command&amp;rsquo;s return value.
I find that it also works well for scrollback, allowing me to at a quick glance where things went wrong. It can also draw attention to nonzero return values for programs that don&amp;rsquo;t properly signal that they didn&amp;rsquo;t properly exit to a user.</description></item><item><title>Unix philosophy-esque approach to web tooling</title><link>https://theden.github.io/thoughts.theden.sh/posts/unix-web/</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/unix-web/</guid><description>[Ongoing. I&amp;rsquo;ll be adding for snippets to this page that I find useful over time Suggestions are also welcome]
Creating WebP images If you want to recursively create .webp versions of images in a folder (same name, saved in same location, different extension name), this script will do that
while IFS= read -r -d &amp;#39;&amp;#39; file; do cwebp -q 90 &amp;#34;$file&amp;#34; -o &amp;#34;${file%.*}.webp&amp;#34; || true done &amp;lt; &amp;lt;(find ./ -type f \( -name &amp;#34;*.</description></item></channel></rss>