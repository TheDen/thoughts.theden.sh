<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on thoughts</title><link>https://theden.github.io/thoughts.theden.sh/posts/</link><description>Recent content in Posts on thoughts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 20 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://theden.github.io/thoughts.theden.sh/posts/atom.xml" rel="self" type="application/rss+xml"/><item><title>Searching GitHub for OpenAI API Keys</title><link>https://theden.github.io/thoughts.theden.sh/posts/openai-api-keys/</link><pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/openai-api-keys/</guid><description>OpenAI API keys in the format
sk-&amp;lt;40 case-sensitive alphanumeric characters&amp;gt; A simple regular expression for this would be
/sk-[a-zA-Z0-9]{40,}/ i.e., match any string that starts with &amp;ldquo;sk-&amp;rdquo; followed by at least 40 alphanumeric characters.
GitHub allows regular expression search, but note that if the search is too expensive you&amp;rsquo;ll get a 5XX. I noticed modifying it to limit to the start of a line, i.e., /^sk-[a-zA-Z0-9]{40,}/ yields results.
Click here to search for OpenAI API keys</description></item><item><title>Free Up Disk Space on MacOS</title><link>https://theden.github.io/thoughts.theden.sh/posts/disk-space-freeing/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/disk-space-freeing/</guid><description>Ignoring system caches, and logs in general for safety.
Brew&amp;rsquo;s Cache # brew cleanup --prune=all -s brew cleanup Remove stale lock files and outdated downloads for all formulae and casks, and remove old versions of installed formulae --prune=all removes everything (not up only a specified age, otherwise set by the env var HOMEBREW_CLEANUP_MAX_AGE_DAYS) -s: Scrub the cache, including downloads for even the latest versions. Note that downloads forany installed formulae or casks will still not be deleted --dry-run can be used to see what would be removed The ~/Library/Caches/ Folder # Though one could be brutal and wipe the entire folder</description></item><item><title>Offbeat Documentaries I Enjoyed Watching</title><link>https://theden.github.io/thoughts.theden.sh/posts/offbeat-documentaries/</link><pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/offbeat-documentaries/</guid><description>Confessions of a Superhero The Dungeon Masters The Parking Lot Movie Cinemania American Movie American Juggalo Einstein&amp;rsquo;s Brain Confessions of a Superhero # Follows four people that dress up in superhero costumes and work on tips taking photos with tourists on Hollywood Boulevard. It starts off innocuous but descends into the personal lives and past of each character.
The Dungeon Masters # Follows the lives of Dungeons &amp;amp; Dragons Gamemasters, aka Dungeon Masters.</description></item><item><title>Improve docker volume performance on MacOS with a RAM disk</title><link>https://theden.github.io/thoughts.theden.sh/posts/docker-ramdisk-macos-benchmark/</link><pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/docker-ramdisk-macos-benchmark/</guid><description>Primer Hardware Setup Random Read and write performance Standard volume RAM Disk I/0 latency Standard volume RAM Disk Cleanup Results Primer # Whilst docker does support tmpfs natively, it&amp;rsquo;s only available if you&amp;rsquo;re running docker on linux. A use-case for using a ram disk, as described in the documentation:
If your container generates non-persistent state data, consider using a tmpfs mount to avoid storing the data anywhere permanently, and to increase the container’s performance by avoiding writing into the container’s writable layer.</description></item><item><title>WhatsApp Desktop attempts to access the camera on MacOS</title><link>https://theden.github.io/thoughts.theden.sh/posts/whatsapp-camera-access/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/whatsapp-camera-access/</guid><description>I use Micro Snitch, a neat tool that shows a notification overlay whenever the microphone or camera is accessed. It also logs all access.
I noticed whenever I open WhatsApp Desktop on Macos it triggers the overlay notification even though WhatsApp doesn&amp;rsquo;t use the camera, and AFAIK WhatsApp on the desktop does not use video.
Digging deeper, we can use lsof after restarting WhatsApp to see what it&amp;rsquo;s trying to do</description></item><item><title>Organising One's Music Library</title><link>https://theden.github.io/thoughts.theden.sh/posts/organising-music/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/organising-music/</guid><description>The Setup # Recently I&amp;rsquo;ve made efforts to have a local lossless music collection. The setup is humble:
The bare metal server is a mid-tier Synology NAS Plex as the media server software With Plexamp, a solid music player client for Plex (runs on all major OSes) Here is the client on MacOS Cool thing is it allows me to stream library when I&amp;rsquo;m outside, download locally, etc. most of the cool features that Spotify and Apple Music have, but without the negatives that come with it, like paying for a subscriptions, being tracked, or having your tracks from a playlist removed for whatever reason that the providers decide.</description></item><item><title>M1 MacBooks and Drive Wear</title><link>https://theden.github.io/thoughts.theden.sh/posts/macbook-disks/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/macbook-disks/</guid><description>Typically, to find the overall wear of a MacBook drive, one installs smartctl from smartmontools via brew install smartmontools or sudo port install smartmontools
Then by looking at the Percentage Used from the output of smartctl -a /dev/disk0
=== START OF SMART DATA SECTION === SMART overall-health self-assessment test result: PASSED SMART/Health Information (NVMe Log 0x02) Critical Warning: 0x00 Temperature: 39 Celsius Available Spare: 100% Available Spare Threshold: 99% Percentage Used: 0% Data Units Read: 48,035,261 [24.</description></item><item><title>Kube Tricks</title><link>https://theden.github.io/thoughts.theden.sh/posts/kube-tricks/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/kube-tricks/</guid><description>Ephemeral Debug Containers # One can use ephemeral debug containers
Alternatively to edit in-place to test out configs and env vars use kubectl edit to modify a pod (or Deployment, StatefulSet etc.) YAML to update the command to do nothing so one can kubectl exec into the pod
apiVersion: v1 kind: Pod metadata: name: unstable-pod spec: containers: - name: unstable-pod image: foobar command: - sh - -c - &amp;#34;tail -f /dev/null&amp;#34; Ensure liveness and readiness probes are commented out if it depends on a runtime condition.</description></item><item><title>Changing Your PS1's Prompt Based on The Previous Command's Return Value</title><link>https://theden.github.io/thoughts.theden.sh/posts/ps1-colour/</link><pubDate>Fri, 25 Jun 2021 21:17:06 +1000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/ps1-colour/</guid><description>You may find it useful for your PS1 to signal if a previous command returned 0 or not. One neat way to do this that doesn&amp;rsquo;t add clutter is to have your PS1 change colour based on the previous command&amp;rsquo;s return value.
I find that it also works well for scrollback, allowing me to at a quick glance where things went wrong. It can also draw attention to nonzero return values for programs that don&amp;rsquo;t properly signal that they didn&amp;rsquo;t properly exit to a user.</description></item><item><title>Unix philosophy-esque approach to web tooling</title><link>https://theden.github.io/thoughts.theden.sh/posts/unix-web/</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><guid>https://theden.github.io/thoughts.theden.sh/posts/unix-web/</guid><description>[Ongoing. I&amp;rsquo;ll be adding for snippets to this page that I find useful over time Suggestions are also welcome]
Creating WebP images # If you want to recursively create .webp versions of images in a folder (same name, saved in same location, different extension name), this script will do that
while IFS= read -r -d &amp;#39;&amp;#39; file; do cwebp -q 90 &amp;#34;$file&amp;#34; -o &amp;#34;${file%.*}.webp&amp;#34; || true done &amp;lt; &amp;lt;(find ./ -type f \( -name &amp;#34;*.</description></item></channel></rss>