<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>thoughts</title>
    <description>Denis Khoshaba&#39;s blog | theden.sh</description>
    <link>/</link>
    
    <language>en</language>
    <copyright>Copyright 2023, Ronalds Vilcins</copyright>
    <lastBuildDate>Sat, 20 May 2023 00:00:00 +0000</lastBuildDate>
    <generator>Hugo - gohugo.io</generator>
    <docs>http://cyber.harvard.edu/rss/rss.html</docs>
    <atom:link href="https://ronaldsvilcins.com/atom.xml" rel="self" type="application/atom+xml"/>
    
    <item>
      <title>Searching GitHub for OpenAI API Keys</title>
      <link>/posts/openai-api-keys/</link>
      <description>&lt;p&gt;OpenAI API keys in the format&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sk-&amp;lt;40 case-sensitive alphanumeric characters&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A simple regular expression for this would be&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/sk-[a-zA-Z0-9]{40,}/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;i.e., match any string that starts with &amp;ldquo;sk-&amp;rdquo; followed by at least 40 alphanumeric characters.&lt;/p&gt;
&lt;p&gt;GitHub allows &lt;a href=&#34;https://docs.github.com/en/search-github/github-code-search/understanding-github-code-search-syntax#using-regular-expressions&#34;&gt;regular expression search&lt;/a&gt;, but note that if the search is too expensive you&amp;rsquo;ll get a &lt;code&gt;5XX&lt;/code&gt; response.&lt;/p&gt;
&lt;p&gt;I noticed modifying it to limit to the start of a line, i.e., &lt;code&gt;/^sk-[a-zA-Z0-9]{40,}/&lt;/code&gt; yields results.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/search?q=%2F%5Esk-%5Ba-zA-Z0-9%5D%7B40%2C%7D%2F&amp;amp;type=code&#34;&gt;Click here to search for OpenAI API keys&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Right now it should return a few results. A few thoughts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m not sure if GitHub is sending alerts for API keys being committed to codebases. They absolutely should if they&amp;rsquo;re not&lt;/li&gt;
&lt;li&gt;OpenAI should allow permission scoping of API keys&lt;/li&gt;
&lt;li&gt;Limiting API keys based on IP CIDR ranges would also be useful&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fin.&lt;/p&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>/posts/openai-api-keys/</guid>
      <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Free Up Disk Space on MacOS</title>
      <link>/posts/disk-space-freeing/</link>
      <description>&lt;p&gt;Ignoring system caches, and logs in general for safety.&lt;/p&gt;
&lt;h1 id=&#34;brews-cache&#34;&gt;Brew&amp;rsquo;s Cache &lt;a href=&#34;#brews-cache&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew cleanup --prune&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;all -s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brew cleanup&lt;/code&gt; Remove stale lock files and outdated downloads for all formulae and casks, and
remove old versions of installed formulae&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--prune=all&lt;/code&gt; removes everything (not up only a specified age, otherwise set by the env var &lt;code&gt;HOMEBREW_CLEANUP_MAX_AGE_DAYS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;: Scrub the cache, including downloads for even the latest versions. Note that downloads forany installed formulae or casks will still not be deleted&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dry-run&lt;/code&gt; can be used to see what would be removed&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;the-librarycaches-folder&#34;&gt;The &lt;code&gt;~/Library/Caches/&lt;/code&gt; Folder &lt;a href=&#34;#the-librarycaches-folder&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Though one could be brutal and wipe the entire folder&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rm -rfv ~/Library/Caches/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It may have unintended consequences, it&amp;rsquo;s better to only delete the larger folders/files, i.e.,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo du -sm ~/Library/Caches/* 2&amp;gt; /dev/null | sort -n
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Will list the folders in the directory sorted by size in MBs.&lt;/p&gt;
&lt;h1 id=&#34;xcode-cache-data&#34;&gt;Xcode Cache Data &lt;a href=&#34;#xcode-cache-data&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To delete the derived data&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -r ~/Library/Developer/Xcode/DerivedData/*/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For cached files&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf ~/Library/Developer/CoreSimulator/Caches/dyld/*/*/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xcrun simctl delete unavailable
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;flush-the-dns-cache&#34;&gt;Flush the DNS cache &lt;a href=&#34;#flush-the-dns-cache&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dscacheutil -flushcache &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo killall -HUP mDNSResponder
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;cups-printer-job-cache&#34;&gt;CUPS Printer Job Cache &lt;a href=&#34;#cups-printer-job-cache&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To delete your printer job cache&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm /var/spool/cups/cache/job.cache*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;quicklook-thumbnail&#34;&gt;QuickLook Thumbnail &lt;a href=&#34;#quicklook-thumbnail&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Using the QuickLook Server debug and management tool&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qlmanage -r cache
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; resets Quick Look Server and all Quick Look client&amp;rsquo;s generator cache&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://objective-see.org/blog/blog_0x30.html&#34;&gt;For more a more in-depth guide on cleaning QuickLooks and how it can leak encrypted data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>/posts/disk-space-freeing/</guid>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Offbeat Documentaries I Enjoyed Watching</title>
      <link>/posts/offbeat-documentaries/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#confessions-of-a-superhero&#34;&gt;Confessions of a Superhero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-dungeon-masters&#34;&gt;The Dungeon Masters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-parking-lot-movie&#34;&gt;The Parking Lot Movie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cinemania&#34;&gt;Cinemania&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#american-movie&#34;&gt;American Movie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#american-juggalo&#34;&gt;American Juggalo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#einsteins-brain&#34;&gt;Einstein&amp;rsquo;s Brain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;confessions-of-a-superherohttpswwwimdbcomtitlett1016164&#34;&gt;&lt;a href=&#34;https://www.imdb.com/title/tt1016164/&#34;&gt;Confessions of a Superhero&lt;/a&gt; &lt;a href=&#34;#confessions-of-a-superherohttpswwwimdbcomtitlett1016164&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;

&lt;img
  src=&#34;/images/confessions-of-a-superhero.webp&#34;
  alt=&#34;confessions-of-a-superhero&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  width=&#34;750&#34;
  height=&#34;422&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;/p&gt;
&lt;p&gt;Follows four people that dress up in superhero costumes and work on tips taking photos with tourists on Hollywood Boulevard. It starts off innocuous but descends into the personal lives and past of each character.&lt;/p&gt;
&lt;h1 id=&#34;the-dungeon-mastershttpswwwimdbcomtitlett0988086&#34;&gt;&lt;a href=&#34;https://www.imdb.com/title/tt0988086/&#34;&gt;The Dungeon Masters&lt;/a&gt; &lt;a href=&#34;#the-dungeon-mastershttpswwwimdbcomtitlett0988086&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;

&lt;img
  src=&#34;/images/the-dungeon-masters.webp&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  width=&#34;550&#34;
  height=&#34;271&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;/p&gt;
&lt;p&gt;Follows the lives of Dungeons &amp;amp; Dragons Gamemasters, aka Dungeon Masters. I particularly like Scott Corum&amp;rsquo;s story—his struggles on getting his fiction published and his desire to create something that he can be proud of before he dies.&lt;/p&gt;
&lt;h1 id=&#34;the-parking-lot-moviehttpswwwimdbcomtitlett1504300&#34;&gt;&lt;a href=&#34;https://www.imdb.com/title/tt1504300/&#34;&gt;The Parking Lot Movie&lt;/a&gt; &lt;a href=&#34;#the-parking-lot-moviehttpswwwimdbcomtitlett1504300&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;

&lt;img
  src=&#34;/images/parking_lot_movie.webp&#34;
  alt=&#34;Parking Lot Movie&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  width=&#34;660&#34;
  height=&#34;370&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;/p&gt;
&lt;p&gt;On the struggles and lifestyle of a group of people that work in a parking lot in Charlottesville, Virginia near University of Virginia. I dug &lt;a href=&#34;https://www.youtube.com/watch?v=vtooQtLvC-4&#34;&gt;Mark Schottinger&amp;rsquo;s tune&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;cinemaniahttpswwwimdbcomtitlett0281724&#34;&gt;&lt;a href=&#34;https://www.imdb.com/title/tt0281724/&#34;&gt;Cinemania&lt;/a&gt; &lt;a href=&#34;#cinemaniahttpswwwimdbcomtitlett0281724&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;

&lt;img
  src=&#34;/images/cinemania.webp&#34;
  alt=&#34;cinemania.jpg&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  width=&#34;620&#34;
  height=&#34;347&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;/p&gt;
&lt;p&gt;Documentary about the lives of five &lt;a href=&#34;https://en.wikipedia.org/wiki/Cinephilia&#34;&gt;cinemaphiles&lt;/a&gt; living in New York City. The fact that they manage their lives around watching as many films in NYC is equally impressive and exhausting.&lt;/p&gt;
&lt;h1 id=&#34;american-moviehttpswwwimdbcomtitlett0181288&#34;&gt;&lt;a href=&#34;https://www.imdb.com/title/tt0181288/&#34;&gt;American Movie&lt;/a&gt; &lt;a href=&#34;#american-moviehttpswwwimdbcomtitlett0181288&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;

&lt;img
  src=&#34;/images/american-movie.webp&#34;
  alt=&#34;American Movie&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  width=&#34;1000&#34;
  height=&#34;750&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;/p&gt;
&lt;p&gt;Follows aspiring filmmaker Mark Borchardt (and friends) attempt at completing the low-budget horror film &lt;em&gt;Coven&lt;/em&gt; in middle America.&lt;/p&gt;
&lt;h1 id=&#34;american-juggalohttpswwwimdbcomtitlett2062478&#34;&gt;&lt;a href=&#34;https://www.imdb.com/title/tt2062478/&#34;&gt;American Juggalo&lt;/a&gt; &lt;a href=&#34;#american-juggalohttpswwwimdbcomtitlett2062478&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;

&lt;img
  src=&#34;/images/american-juggalo.webp&#34;
  alt=&#34;american juggalo&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  width=&#34;500&#34;
  height=&#34;316&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;/p&gt;
&lt;p&gt;Documentary on Juggalos (hardcore Insane Clown Posse fans) that attend the once a year event called The Gathering of the Juggalos. &lt;a href=&#34;https://vimeo.com/29589320&#34;&gt;You can watch on Vimeo&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;einsteins-brainhttpswwwimdbcomtitlett0192519&#34;&gt;&lt;a href=&#34;https://www.imdb.com/title/tt0192519/&#34;&gt;Einstein&amp;rsquo;s Brain&lt;/a&gt; &lt;a href=&#34;#einsteins-brainhttpswwwimdbcomtitlett0192519&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;

&lt;img
  src=&#34;/images/einstein-brain.webp&#34;
  alt=&#34;Einstein&amp;amp;rsquo;s Brain&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  width=&#34;1424&#34;
  height=&#34;2072&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;/p&gt;
&lt;p&gt;Follows eccentric Japanese professor Kenji Sugimoto on his travels to the United States to find where Einstein&amp;rsquo;s brain is stored.&lt;/p&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>/posts/offbeat-documentaries/</guid>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Improve docker volume performance on MacOS with a RAM disk</title>
      <link>/posts/docker-ramdisk-macos-benchmark/</link>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#primer&#34;&gt;Primer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hardware&#34;&gt;Hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#random-read-and-write-performance&#34;&gt;Random Read and write performance&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#standard-volume&#34;&gt;Standard volume&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ram-disk&#34;&gt;RAM Disk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#i0-latency&#34;&gt;I/0 latency&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#standard-volume-1&#34;&gt;Standard volume&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ram-disk-1&#34;&gt;RAM Disk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cleanup&#34;&gt;Cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#results&#34;&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;primer&#34;&gt;Primer &lt;a href=&#34;#primer&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Whilst docker does support &lt;a href=&#34;https://docs.docker.com/storage/tmpfs/&#34;&gt;tmpfs&lt;/a&gt; natively, it&amp;rsquo;s only available if you&amp;rsquo;re running docker on linux. A use-case for using a ram disk, as described in the documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your container generates non-persistent state data, consider using a tmpfs mount to avoid storing the data anywhere permanently, and to increase the container’s performance by avoiding writing into the container’s writable layer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, we can still create a RAM disk in MacOS and mount it within docker. I&amp;rsquo;ll mount a RAM disk and a standard docker volume and measuring the performance of both to compare.&lt;/p&gt;
&lt;h1 id=&#34;hardware&#34;&gt;Hardware &lt;a href=&#34;#hardware&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;My M1 Macbook Air&amp;rsquo;s current sysinfo (unrelated info redacted)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$  system_profiler SPSoftwareDataType SPHardwareDataType SPNVMeDataType
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Software:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System Software Overview:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System Version: macOS 12.4 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;21F79&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Kernel Version: Darwin 21.5.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Boot Volume: Macintosh HD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Boot Mode: Normal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Computer Name: &amp;lt;REDACTED&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      User Name: &amp;lt;REDACTED&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Secure Virtual Memory: Enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System Integrity Protection: Enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Time since boot: &amp;lt;REDACTED&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hardware:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Hardware Overview:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Model Name: MacBook Air
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Model Identifier: MacBookAir10,1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Chip: Apple M1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Total Number of Cores: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; performance and &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; efficiency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Memory: &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; GB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System Firmware Version: 7459.121.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      OS Loader Version: 7459.121.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Serial Number &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;system&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: &amp;lt;REDACTED&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Hardware UUID: &amp;lt;REDACTED&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Provisioning UDID: &amp;lt;REDACTED&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Activation Lock Status: Enabled
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NVMExpress:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Apple SSD Controller:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        APPLE SSD AP1024Q:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Capacity: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; TB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1,000,555,581,440 bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          TRIM Support: Yes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Model: APPLE SSD AP1024Q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Revision: 387.120.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Serial Number: &amp;lt;REDACTED&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Detachable Drive: No
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          BSD Name: disk0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Partition Map Type: GPT &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GUID Partition Table&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Removable Media: No
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          S.M.A.R.T. status: Verified
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          Volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            disk0s1:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              Capacity: 524.3 MB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;524,288,000 bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              BSD Name: disk0s1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              Content: Apple_APFS_ISC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            disk0s2:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              Capacity: 994.66 GB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;994,662,584,320 bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              BSD Name: disk0s2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              Content: Apple_APFS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            disk0s3:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              Capacity: 5.37 GB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5,368,664,064 bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              BSD Name: disk0s3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              Content: Apple_APFS_Recovery 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;setup&#34;&gt;Setup &lt;a href=&#34;#setup&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;First we create a regular folder within the NVMe mount to test the standard docker volume&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir ~/docker-test-volume/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we create a RAM disk on MacOS, in this case it will be 2GBs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diskutil erasevolume HFS+ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ramdisk&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;hdiutil attach -nobrowse -nomount ram://4194304&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Started erase on disk7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unmounting disk
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Erasing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Initialized /dev/rdisk7 as a &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GB &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;-insensitive HFS Plus volume
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Mounting disk
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Finished erase on disk7 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ramdisk&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we&amp;rsquo;ll create an &lt;code&gt;alpine&lt;/code&gt; docker container mounting both volumes and install the required benchmarking software&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/docker-test-volume/:/std-volume&amp;#34;&lt;/span&gt; -v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Volumes/ramdisk/:/ramdisk&amp;#34;&lt;/span&gt; -it alpine sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;random-read-and-write-performance&#34;&gt;Random Read and write performance &lt;a href=&#34;#random-read-and-write-performance&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;ll be using &lt;a href=&#34;https://github.com/axboe/fio&#34;&gt;fio&lt;/a&gt; for benchmarking read/write performance&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apk add ioping
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;standard-volume&#34;&gt;Standard volume &lt;a href=&#34;#standard-volume&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/std-volume &lt;span style=&#34;color:#75715e&#34;&gt;# fio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=test --filename=test --bs=4k --iodepth=64 --size=1G --readwrite=randrw --rwmixread=75&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;g&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: rw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;randrw, bs&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 4096B-4096B, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 4096B-4096B, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 4096B-4096B, ioengine&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libaio, iodepth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fio-3.28
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Starting &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; process
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test: Laying out IO file &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file / 1024MiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Jobs: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)][&lt;/span&gt;97.0%&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;34.2MiB/s,w&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;11.7MiB/s&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8766,w&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2996&lt;/span&gt; IOPS&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;eta 00m:01s&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;groupid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, jobs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: err&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0: pid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;16: Mon Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 23:20:11 &lt;span style=&#34;color:#ae81ff&#34;&gt;2022&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  read: IOPS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;6159, BW&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;24.1MiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;25.2MB/s&lt;span style=&#34;color:#f92672&#34;&gt;)(&lt;/span&gt;768MiB/31900msec&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   bw &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;  KiB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2756, max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;43405, per&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;99.89%, avg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;24613.37, stdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4898.59, samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   iops        : min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  689, max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10851, avg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;6153.08, stdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1224.62, samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  write: IOPS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2057, BW&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8231KiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8429kB/s&lt;span style=&#34;color:#f92672&#34;&gt;)(&lt;/span&gt;256MiB/31900msec&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; zone resets
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   bw &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;  KiB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  972, max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;14605, per&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;99.90%, avg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8223.41, stdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1703.56, samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   iops        : min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  243, max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 3651, avg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2055.63, stdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;425.84, samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cpu          : usr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2.60%, sys&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;14.09%, ctx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;327802, majf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, minf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IO depths    : 1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, 2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, 4&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, 8&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, 16&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, 32&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;64&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100.0%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     submit    : 0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 4&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100.0%, 8&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 16&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 32&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 64&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;64&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     complete  : 0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 4&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100.0%, 8&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 16&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 32&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 64&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;64&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     issued rwts: total&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;196498,65646,0,0 short&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0,0,0,0 dropped&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0,0,0,0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     latency   : target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, window&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, percentile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100.00%, depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Run status group &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;all jobs&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   READ: bw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;24.1MiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;25.2MB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, 24.1MiB/s-24.1MiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;25.2MB/s-25.2MB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, io&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;768MiB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;805MB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, run&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;31900-31900msec
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  WRITE: bw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8231KiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8429kB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, 8231KiB/s-8231KiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8429kB/s-8429kB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, io&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;256MiB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;269MB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, run&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;31900-31900msec
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ram-disk&#34;&gt;RAM Disk &lt;a href=&#34;#ram-disk&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ramdisk &lt;span style=&#34;color:#75715e&#34;&gt;# fio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=test --filename=test --bs=4k --iodepth=64 --size=1G --readwrite=randrw --rwmixread=75&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;g&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: rw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;randrw, bs&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 4096B-4096B, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;W&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 4096B-4096B, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 4096B-4096B, ioengine&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;libaio, iodepth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fio-3.28
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Starting &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; process
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test: Laying out IO file &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file / 1024MiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Jobs: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;m&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)][&lt;/span&gt;100.0%&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;59.7MiB/s,w&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;20.3MiB/s&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;15.3k,w&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5206&lt;/span&gt; IOPS&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;eta 00m:00s&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;groupid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, jobs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: err&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0: pid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;19: Mon Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 23:23:03 &lt;span style=&#34;color:#ae81ff&#34;&gt;2022&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  read: IOPS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;13.6k, BW&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;53.3MiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;55.9MB/s&lt;span style=&#34;color:#f92672&#34;&gt;)(&lt;/span&gt;768MiB/14396msec&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   bw &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;  KiB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;19832, max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;65368, per&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;99.48%, avg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;54313.21, stdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;9848.89, samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   iops        : min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 4958, max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;16342, avg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;13578.14, stdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2462.20, samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  write: IOPS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4560, BW&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;17.8MiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;18.7MB/s&lt;span style=&#34;color:#f92672&#34;&gt;)(&lt;/span&gt;256MiB/14396msec&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; zone resets
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   bw &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;  KiB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 6728, max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;22208, per&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;99.50%, avg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;18149.14, stdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3321.62, samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   iops        : min&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1682, max&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5552, avg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4537.14, stdev&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;830.41, samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cpu          : usr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;6.59%, sys&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;33.55%, ctx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;327779, majf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, minf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IO depths    : 1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, 2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, 4&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, 8&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, 16&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, 32&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;64&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100.0%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     submit    : 0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 4&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100.0%, 8&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 16&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 32&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 64&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;64&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     complete  : 0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 4&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100.0%, 8&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 16&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 32&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%, 64&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1%, &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;64&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     issued rwts: total&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;196498,65646,0,0 short&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0,0,0,0 dropped&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0,0,0,0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     latency   : target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, window&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0, percentile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;100.00%, depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Run status group &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;all jobs&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   READ: bw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;53.3MiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;55.9MB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, 53.3MiB/s-53.3MiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;55.9MB/s-55.9MB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, io&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;768MiB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;805MB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, run&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;14396-14396msec
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  WRITE: bw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;17.8MiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;18.7MB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, 17.8MiB/s-17.8MiB/s &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;18.7MB/s-18.7MB/s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, io&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;256MiB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;269MB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, run&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;14396-14396msec
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;i0-latency&#34;&gt;I/0 latency &lt;a href=&#34;#i0-latency&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We also can use &lt;a href=&#34;https://github.com/koct9i/ioping&#34;&gt;IOPing&lt;/a&gt; to monitor I/O latency in real time, as a basic heuristic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apk add ioping
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;standard-volume-1&#34;&gt;Standard volume &lt;a href=&#34;#standard-volume-1&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/std-volume &lt;span style=&#34;color:#75715e&#34;&gt;# ioping -c 10 .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;78.3 us &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;warmup&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;396.4 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;369&lt;/span&gt; us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;322.9 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;254.2 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;369.7 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;284&lt;/span&gt; us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;316.2 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;389.7 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;308.2 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--- . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs0 926.4 GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ioping statistics ---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; requests completed in 3.01 ms, &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; KiB read, 2.99 k iops, 11.7 MiB/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generated &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; requests in 9.00 s, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; KiB, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; iops, 4.44 KiB/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;min/avg/max/mdev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 254.2 us / 334.5 us / 396.4 us / 46.5 us
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ram-disk-1&#34;&gt;RAM Disk &lt;a href=&#34;#ram-disk-1&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ramdisk &lt;span style=&#34;color:#75715e&#34;&gt;# ioping -c 10 .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;63.3 us &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;warmup&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;201.5 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;204.0 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;327.4 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;297.5 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;202.9 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;390.1 us &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;slow&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;288.0 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;311.8 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; KiB &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: request&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;381.5 us
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--- . &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;virtiofs virtiofs1 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; GiB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ioping statistics ---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; requests completed in 2.60 ms, &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; KiB read, 3.46 k iops, 13.5 MiB/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;generated &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; requests in 9.00 s, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; KiB, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; iops, 4.44 KiB/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;min/avg/max/mdev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 201.5 us / 289.4 us / 390.1 us / 69.2 us
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;cleanup&#34;&gt;Cleanup &lt;a href=&#34;#cleanup&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To remove the RAMdisk&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ diskutil unmount /dev/disk7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Volume ramdisk on disk7 unmounted
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ diskutil unmountDisk /dev/disk7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unmount of all volumes on disk7 was successful
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;results&#34;&gt;Results &lt;a href=&#34;#results&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Note that the tests are somewhat cursory, but from what we have the read/write IOPS are double with the RAM disk, and latency is slightly improved.&lt;/p&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>/posts/docker-ramdisk-macos-benchmark/</guid>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>WhatsApp Desktop attempts to access the camera on MacOS</title>
      <link>/posts/whatsapp-camera-access/</link>
      <description>&lt;p&gt;I use &lt;a href=&#34;https://www.obdev.at/products/microsnitch/index.html&#34;&gt;Micro Snitch&lt;/a&gt;, a neat tool that shows a notification overlay whenever the microphone or camera is accessed. It also logs all access.&lt;/p&gt;
&lt;p&gt;I noticed whenever I open WhatsApp Desktop on Macos it triggers the overlay notification even though WhatsApp doesn&amp;rsquo;t use the camera, and AFAIK WhatsApp on the desktop does not use video.&lt;/p&gt;
&lt;p&gt;Digging deeper, we can use &lt;code&gt;lsof&lt;/code&gt; after restarting WhatsApp to see what it&amp;rsquo;s trying to do&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ lsof  | grep -i whatsapp | grep -i camera
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WhatsApp  &lt;span style=&#34;color:#ae81ff&#34;&gt;21532&lt;/span&gt;  den  txt       REG               1,14     &lt;span style=&#34;color:#ae81ff&#34;&gt;199264&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1152921500312262343&lt;/span&gt; /System/Library/Frameworks/CoreMediaIO.framework/Versions/A/Resources/AppleCamera.plugin/Contents/MacOS/AppleCamera
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WhatsApp  &lt;span style=&#34;color:#ae81ff&#34;&gt;21532&lt;/span&gt;  den  txt       REG               1,14     &lt;span style=&#34;color:#ae81ff&#34;&gt;222419&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;38743723&lt;/span&gt; /private/var/db/oah/279281326358528_279281326358528/d1adba6cbceda131a35067381665ea5fa48ee87432b319d959ba833218f44b50/AppleCamera.aot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WhatsApp  &lt;span style=&#34;color:#ae81ff&#34;&gt;21532&lt;/span&gt;  den  txt       REG               1,14     &lt;span style=&#34;color:#ae81ff&#34;&gt;544688&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1152921500312262566&lt;/span&gt; /System/Library/Frameworks/CoreMediaIO.framework/Versions/A/Resources/AppleH13CameraInterface.plugin/Contents/MacOS/AppleH13CameraInterface
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WhatsApp  &lt;span style=&#34;color:#ae81ff&#34;&gt;21532&lt;/span&gt;  den  txt       REG               1,14     &lt;span style=&#34;color:#ae81ff&#34;&gt;313915&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;38743735&lt;/span&gt; /private/var/db/oah/279281326358528_279281326358528/501b68cc7ae0999b4979c1655ffb32b36a88c589567dfbf2fee20035c5772625/AppleH13CameraInterface.aot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it&amp;rsquo;s opening the regular files (&lt;code&gt;REG&lt;/code&gt;) with the file descriptor reporting as &lt;code&gt;txt&lt;/code&gt;, i.e., program text (code and data) according to the &lt;code&gt;lsof&lt;/code&gt; man page.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure why WhatsApp Desktop attempts to read &lt;code&gt;AppleCamera&lt;/code&gt;, it&amp;rsquo;s definitely not an electron thing since other well-known electron apps don&amp;rsquo;t have this behaviour.&lt;/p&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>/posts/whatsapp-camera-access/</guid>
      <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Organising One&#39;s Music Library</title>
      <link>/posts/organising-music/</link>
      <description>&lt;h1 id=&#34;the-setup&#34;&gt;The Setup &lt;a href=&#34;#the-setup&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Recently I&amp;rsquo;ve made efforts to have a local lossless music collection. The setup is humble:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The bare metal server is a mid-tier Synology NAS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.plex.tv/&#34;&gt;Plex&lt;/a&gt; as the media server software&lt;/li&gt;
&lt;li&gt;With &lt;a href=&#34;https://plexamp.com/&#34;&gt;Plexamp&lt;/a&gt;, a solid music player client for Plex (runs on all major OSes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the client on MacOS


&lt;img
  src=&#34;/images/wes.webp&#34;
  alt=&#34;Wes Montgomery on Plexamp&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  width=&#34;2290&#34;
  height=&#34;1490&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;/p&gt;
&lt;p&gt;Cool thing is it allows me to stream library when I&amp;rsquo;m outside, download locally, etc. most of the cool features that Spotify and Apple Music have, but without the negatives that come with it, like paying for a subscriptions, being tracked, or having your tracks from a playlist removed for whatever reason that the providers decide.
;&lt;/p&gt;
&lt;h1 id=&#34;organising-music&#34;&gt;Organising Music &lt;a href=&#34;#organising-music&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Anyone that owned an iPod or MP3 player back in the day knows the pain of editing ID3 metadata and adding album art for their tunes so they appear clean on their device. Fortunately over the years, things have gotten easier—I&amp;rsquo;ll go through some tools I tried and my thoughts on what worked and what didn&amp;rsquo;t for me.&lt;/p&gt;
&lt;h2 id=&#34;musicbrainz-picardhttpspicardmusicbrainzorg&#34;&gt;&lt;a href=&#34;https://picard.musicbrainz.org/&#34;&gt;MusicBrainz Picard&lt;/a&gt; &lt;a href=&#34;#musicbrainz-picardhttpspicardmusicbrainzorg&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Comment: Probably my favourite tool, most used for me.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open Source and cross-platform&lt;/li&gt;
&lt;li&gt;Supports &lt;a href=&#34;http://acoustid.org/&#34;&gt;AcoustID&lt;/a&gt; for identification&lt;/li&gt;
&lt;li&gt;Supports &lt;a href=&#34;https://picard.musicbrainz.org/plugins/&#34;&gt;heaps of plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not command-line driven (may be a con for some)&lt;/li&gt;
&lt;li&gt;Depending on your resources, it can be slow or crash with large libraries, so things may need to be chunked&lt;/li&gt;
&lt;li&gt;May give undesired metadata, so it&amp;rsquo;s always a good idea to check the diffs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;beetshttpsgithubcombeetboxbeets&#34;&gt;&lt;a href=&#34;https://github.com/beetbox/beets&#34;&gt;Beets&lt;/a&gt; &lt;a href=&#34;#beetshttpsgithubcombeetboxbeets&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Comment: Command line driven, very configurable, opinionated (in my opinion), but works well, and people seem to love the tool. However I just end up using MusicBrainz Picard most of the time.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open source and cross-platform&lt;/li&gt;
&lt;li&gt;Active development&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://beets.readthedocs.io/en/stable/&#34;&gt;Well-documented&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Config-file driven, so easily portable&lt;/li&gt;
&lt;li&gt;Supports &lt;a href=&#34;https://beets.readthedocs.io/en/stable/plugins/index.html&#34;&gt;heaps of plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Command line may be off-putting for some&lt;/li&gt;
&lt;li&gt;May be too fiddly for some that just want better tags and album art&lt;/li&gt;
&lt;li&gt;Can be disastrous for libraries if misconfigured&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;blisshttpswwwblisshqcom&#34;&gt;&lt;a href=&#34;https://www.blisshq.com/&#34;&gt;Bliss&lt;/a&gt; &lt;a href=&#34;#blisshttpswwwblisshqcom&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Comment: Solid, but didn&amp;rsquo;t work for me and I got a refund. It could work really well for others.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Works as a server, accessible via the web within your local network&lt;/li&gt;
&lt;li&gt;Nice UI&lt;/li&gt;
&lt;li&gt;Rule-based, which you set then it executes them on your library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paid, closed&lt;/li&gt;
&lt;li&gt;Was very slow for me&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mp3taghttpswwwmp3tagdeen&#34;&gt;&lt;a href=&#34;https://www.mp3tag.de/en/&#34;&gt;Mp3tag&lt;/a&gt; &lt;a href=&#34;#mp3taghttpswwwmp3tagdeen&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Comment: Similar to MusicBrainz Picard, but I didn&amp;rsquo;t really use because it&amp;rsquo;s &lt;a href=&#34;https://community.mp3tag.de/t/mp3tag-under-gpl/7976/4&#34;&gt;not open source&lt;/a&gt;, and doesn&amp;rsquo;t support linux. I&amp;rsquo;ve read it&amp;rsquo;s solid for Windows users (but Picard supports windows anyway). An open source version I&amp;rsquo;ve seen of Mp3tag is &lt;a href=&#34;https://github.com/puddletag/puddletag&#34;&gt;Puddletag&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;mediamonkeyhttpswwwmediamonkeycom&#34;&gt;&lt;a href=&#34;https://www.mediamonkey.com/&#34;&gt;MediaMonkey&lt;/a&gt; &lt;a href=&#34;#mediamonkeyhttpswwwmediamonkeycom&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Comment: Also didn&amp;rsquo;t really use this since it&amp;rsquo;s Windows and Android only. Many that organised music in the early 2000s would remember MediamMonkey, good to know the project is still going strong. Note that although there is a free version, there are &lt;a href=&#34;https://www.mediamonkey.com/windows&#34;&gt;higher paid tier versions&lt;/a&gt;, so for serious use it&amp;rsquo;s probably not free.&lt;/p&gt;
&lt;h2 id=&#34;roonhttpsroonlabscom&#34;&gt;&lt;a href=&#34;https://roonlabs.com/&#34;&gt;Roon&lt;/a&gt; &lt;a href=&#34;#roonhttpsroonlabscom&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Comment: Too expensive for many ($13/mo or $700 lifetime subscription), closed source. Would replace my entire Plex setup for music (organising isn&amp;rsquo;t the main feature of roon). I&amp;rsquo;ve heard great things about it, especially with its features that appeal to audiophiles. There is a free trial, but if I like it I&amp;rsquo;d have to pay the sub, so you I can&amp;rsquo;t miss out on what I don&amp;rsquo;t know I guess?&lt;/p&gt;
&lt;h2 id=&#34;miscellaneous-tools&#34;&gt;Miscellaneous Tools &lt;a href=&#34;#miscellaneous-tools&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flacon.github.io/&#34;&gt;Flacon&lt;/a&gt;: Splits a single large audio file containing the entire album into the separate audio tracks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eqmac.app/&#34;&gt;eqMac&lt;/a&gt;: Parametric equaliser for MacOS. Supports &lt;a href=&#34;https://github.com/jaakkopasanen/AutoEq&#34;&gt;AutoEQ&lt;/a&gt; for headphone users (not free). &lt;a href=&#34;https://rogueamoeba.com/soundsource/&#34;&gt;Soundsource&lt;/a&gt; is another alternative, but also not free&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.foobar2000.org/mac&#34;&gt;foobar&lt;/a&gt;: There&amp;rsquo;s foobar for MacOS, not as full-featured as the Windows version, but good for audio files.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>/posts/organising-music/</guid>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>M1 MacBooks and Drive Wear</title>
      <link>/posts/macbook-disks/</link>
      <description>&lt;p&gt;Typically, to find the overall wear of a MacBook drive, one installs &lt;code&gt;smartctl&lt;/code&gt; from &lt;a href=&#34;http://www.smartmontools.org/&#34;&gt;smartmontools&lt;/a&gt; via &lt;code&gt;brew install smartmontools&lt;/code&gt; or &lt;code&gt;sudo port install smartmontools&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then by looking at the &lt;code&gt;Percentage Used&lt;/code&gt; from the output of &lt;code&gt;smartctl -a /dev/disk0&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;=== START OF SMART DATA SECTION ===
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SMART overall-health self-assessment test result: PASSED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SMART/Health Information (NVMe Log 0x02)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Critical Warning:                   0x00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Temperature:                        39 Celsius
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Available Spare:                    100%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Available Spare Threshold:          99%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Percentage Used:                    0%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Data Units Read:                    48,035,261 [24.5 TB]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Data Units Written:                 31,532,520 [16.1 TB]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host Read Commands:                 809,807,603
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host Write Commands:                409,470,021
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Controller Busy Time:               0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Power Cycles:                       123
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Power On Hours:                     564
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unsafe Shutdowns:                   12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Media and Data Integrity Errors:    0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error Information Log Entries:      0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or as a one-liner&lt;/p&gt;
&lt;p&gt;&lt;code&gt;smartctl -a /dev/disk0 | awk -F &#39;:&#39; &#39;/Percentage Used:/{gsub(/ /, &amp;quot;&amp;quot;, $2); print $2}&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In my case it&amp;rsquo;s &lt;code&gt;0%&lt;/code&gt;, but what exactly does &lt;code&gt;Percentage Used&lt;/code&gt; mean? These &lt;a href=&#34;https://media.kingston.com/support/downloads/MKP_521.6_SMART-DCP1000_attribute.pdf&#34;&gt;Kingston&lt;/a&gt; and &lt;a href=&#34;https://www.nvmexpress.org/wp-content/uploads/NVM_Express_Management_Interface_1_0a_2017.04.08_-_gold.pdf&#34;&gt;nvmexpress.com&amp;rsquo;s&lt;/a&gt; documents shed some light&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Percentage Used: Contains a vendor specific estimate of the percentage of NVM subsystem life used
based on the actual usage and the manufacturer’s prediction of NVM life. A value of 100 indicates that
the estimated endurance of the NVM in the NVM subsystem has been consumed, but may not indicate
an NVM subsystem failure. The value is allowed to exceed 100. Percentages greater than 254 shall be
represented as 255. This value shall be updated once per power-on hour (when the controller is not in a
sleep state).
Refer to the JEDEC JESD218A standard for SSD device life and endurance measurement techniques.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My hunch is that it&amp;rsquo;s probably related to &lt;code&gt;Data Units Read&lt;/code&gt; and &lt;code&gt;Data Units Written&lt;/code&gt; given how often MacOS swaps, but since the attribute is vendor specific it may be misinterpreted, I suppose time will tell whether these new soldered-on SSD MacBooks will become bricks.&lt;/p&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>/posts/macbook-disks/</guid>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Kube Tricks</title>
      <link>/posts/kube-tricks/</link>
      <description>&lt;h2 id=&#34;ephemeral-debug-containers&#34;&gt;Ephemeral Debug Containers &lt;a href=&#34;#ephemeral-debug-containers&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One can use &lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/debug-running-pod/#ephemeral-container&#34;&gt;ephemeral debug containers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alternatively to edit in-place to test out configs and env vars use &lt;code&gt;kubectl edit&lt;/code&gt; to modify a pod (or &lt;code&gt;Deployment&lt;/code&gt;, &lt;code&gt;StatefulSet&lt;/code&gt; etc.) YAML to update the command to do nothing so one can &lt;code&gt;kubectl exec&lt;/code&gt; into the pod&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;unstable-pod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;unstable-pod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;foobar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - -&lt;span style=&#34;color:#ae81ff&#34;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tail -f /dev/null&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ensure &lt;code&gt;liveness&lt;/code&gt; and &lt;code&gt;readiness&lt;/code&gt; probes are commented out if it depends on a runtime condition.&lt;/p&gt;
&lt;h2 id=&#34;utilising-podmanagementpolicyhttpskubernetesiodocstutorialsstateful-applicationbasic-stateful-setpod-management-policy&#34;&gt;Utilising &lt;a href=&#34;https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy&#34;&gt;podmanagementpolicy&lt;/a&gt; &lt;a href=&#34;#utilising-podmanagementpolicyhttpskubernetesiodocstutorialsstateful-applicationbasic-stateful-setpod-management-policy&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mostly used for &lt;code&gt;StatefulSets&lt;/code&gt;. Setting &lt;code&gt;podManagementPolicy: &amp;quot;Parallel&amp;quot;&lt;/code&gt; means the ordered pods will run and be terminated in parallel. Useful for when one doesn&amp;rsquo;t care about pods starting serially, in order. Keep in mind, if a broken deployment is scaled with &lt;code&gt;n&lt;/code&gt; pods, there will be an &lt;code&gt;n&lt;/code&gt; amount of &lt;code&gt;CrashLoopBackOffs&lt;/code&gt; in parallel.&lt;/p&gt;
&lt;h2 id=&#34;defaulting-to-retain-pvcs&#34;&gt;Defaulting to Retain &lt;code&gt;PVCs&lt;/code&gt; &lt;a href=&#34;#defaulting-to-retain-pvcs&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For example, creating a &lt;code&gt;StorageClass&lt;/code&gt; (e.g., if GCP is the provider)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;storage.k8s.io/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;StorageClass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;standard-pd-retain&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;provisioner&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes.io/gce-pd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;reclaimPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Retain&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;allowVolumeExpansion&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;volumeBindingMode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;WaitForFirstConsumer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;parameters&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pd-standard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;reclaimPolicy: Retain&lt;/code&gt; ensures if &lt;code&gt;PVs&lt;/code&gt; are deleted, on the storage backed side (EBS, GCP Disks etc.) are preserved. The general idea is not to let Kubernetes actually delete any data, the &lt;code&gt;PV&lt;/code&gt; will disappear but the volume will still persist outside of Kubernetes. This is useful when one accidentally deletes a &lt;code&gt;PV&lt;/code&gt;, since it can be reattached to a new &lt;code&gt;PVC&lt;/code&gt; for recovery (I’ve had to do this unfortunately).&lt;/p&gt;
&lt;h2 id=&#34;debugging-methods&#34;&gt;Debugging Methods &lt;a href=&#34;#debugging-methods&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When something goes awry, and sometimes there isn&amp;rsquo;t sophisticated monitoring already set up because there isn&amp;rsquo;t enough time to build it yet—so one will probably need to get familiar with checking the right places, especially if an issue is urgent.&lt;/p&gt;
&lt;p&gt;For example if something is broken and it’s not immediately obvious if it’s an application or a cluster-wide issue, a good order to deep-dive into things would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go by the first hunch and follow that (as one is naturally inclined to do). After a while one will learn the general pitfalls, or have built intuition.&lt;/li&gt;
&lt;li&gt;Start by running &lt;code&gt;kubectl describe&lt;/code&gt; on the pods that have issues and check the &lt;code&gt;events&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;kubectl get events&lt;/code&gt; in the namespace. Then &lt;code&gt;kubectl get events --sort-by=.metadata.creationTimestamp&lt;/code&gt; and inspect.&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;kubectl get pods -o wide&lt;/code&gt; to see which node the pod is running on. Then &lt;code&gt;kubectl describe nodes&lt;/code&gt; to see if there are issues with the particular node (or any others).&lt;/li&gt;
&lt;li&gt;If it’s an issue with &lt;code&gt;PVCs&lt;/code&gt;, check the persistent volumes since they sometimes get lost, via &lt;code&gt;kubectl get pv&lt;/code&gt; or &lt;code&gt;kubectl describe pv&lt;/code&gt;. If &lt;code&gt;PVs&lt;/code&gt; are stuck as &lt;code&gt;Terminating&lt;/code&gt;, edit the &lt;code&gt;PV&lt;/code&gt; and delete the &lt;code&gt;Finalizers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If it’s a performance issue, use &lt;code&gt;watch -n5 kubectl top nodes&lt;/code&gt; (or &lt;code&gt;kubectl top pods&lt;/code&gt;) and inspect.&lt;/li&gt;
&lt;li&gt;If it’s a scaling issue check &lt;code&gt;autoscaler kubectl -n kube-system logs -f deployment.apps/cluster-autoscaler&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If it’s a networking issue check the Kubernetes DNS. In certain infra configurations &lt;code&gt;kube-dns&lt;/code&gt; pods can be scheduled on only one node (sometimes a preemptible or spot node), guaranteeing downtime.&lt;/li&gt;
&lt;li&gt;Check the VMs on the cloud provider if it&amp;rsquo;s a compute issues, or the disk if it’s a storage issue. Sometimes it&amp;rsquo;s preemptible/spot nodes going down (or the general provider itself)
Usually the problem will emerge. Normally one doesn&amp;rsquo;t often need to directly connect to the VM.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;statefulsets-are-more-trouble-than-theyre-worth&#34;&gt;&lt;code&gt;StatefulSets&lt;/code&gt; are more trouble than they&amp;rsquo;re worth &lt;a href=&#34;#statefulsets-are-more-trouble-than-theyre-worth&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;StatefulSets&lt;/code&gt; have their place, but in my opinion they’re not ideal when one really wants to principally keep state. Useful for general compute pods where it’s good to keep state between pod restarts and the like. But in situations where on is running a properly stateful service like &lt;code&gt;HDFS&lt;/code&gt; or &lt;code&gt;ES&lt;/code&gt;, a &lt;code&gt;Deployment&lt;/code&gt; + &lt;code&gt;PVC&lt;/code&gt; is almost always better. Here are some comparisons, say for a &lt;code&gt;HDFS&lt;/code&gt; (namenode) pod with &lt;code&gt;n&lt;/code&gt; datanodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If one wants to remove ; number 4 of n in a &lt;code&gt;StatefulSet&lt;/code&gt;, one has to scale them down since they’re ordered&lt;/li&gt;
&lt;li&gt;If one wants to migrate the &lt;code&gt;PVs&lt;/code&gt; to a different cluster, it&amp;rsquo;s non-trivial since &lt;code&gt;volumeClaimTemplates&lt;/code&gt; will create new &lt;code&gt;PVCs&lt;/code&gt; + &lt;code&gt;PVs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If one accidentally delete the &lt;code&gt;StatefulSet&lt;/code&gt;, the &lt;code&gt;volumeClaimTemplates&lt;/code&gt; is removed, and non-trivial to reattach &lt;code&gt;PVs&lt;/code&gt; (if they were set to &lt;code&gt;Retain&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;One can&amp;rsquo;t have datanodes in a &lt;code&gt;StatefulSet&lt;/code&gt; that have different &lt;code&gt;PVC&lt;/code&gt; sizes, requests, env vars, or anything useful. They stay identical.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;using-kubectl-diff-and-validate---dry-run&#34;&gt;Using &lt;code&gt;kubectl diff&lt;/code&gt; and &lt;code&gt;validate --dry-run&lt;/code&gt; &lt;a href=&#34;#using-kubectl-diff-and-validate---dry-run&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Both useful for CI, but generally a good idea to check the &lt;code&gt;diff&lt;/code&gt; of a resource that&amp;rsquo;s about to updated.&lt;/p&gt;
&lt;h2 id=&#34;switch-namespaces-and-clusters-faster&#34;&gt;Switch Namespaces and Clusters Faster &lt;a href=&#34;#switch-namespaces-and-clusters-faster&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tools like &lt;a href=&#34;https://github.com/ahmetb/kubectx&#34;&gt;kubectx + kubens&lt;/a&gt; are useful to switch between different clusters and namespaces faster. Renaming both binaries to &lt;code&gt;kcontext&lt;/code&gt; and &lt;code&gt;knamespace&lt;/code&gt; is another neat trick to make &lt;code&gt;kubectl&lt;/code&gt; autocomplete.&lt;/p&gt;
&lt;h2 id=&#34;keeping-it-simple&#34;&gt;Keeping it Simple &lt;a href=&#34;#keeping-it-simple&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Personally, I prefer &lt;code&gt;kustomize&lt;/code&gt; + &lt;code&gt;envsubst&lt;/code&gt; + &lt;code&gt;python&lt;/code&gt; to template via &lt;code&gt;overlays&lt;/code&gt;. I’m not into templating YAML (kustomize is advertised as &amp;ldquo;template-free&amp;rdquo; templating, but it&amp;rsquo;s still somewhat &lt;code&gt;YAML HELL&lt;/code&gt; like many things).&lt;/p&gt;
&lt;p&gt;Personally I avoid using helm (messy configs, more moving parts, black box, the &amp;ldquo;package management&amp;rdquo; isn&amp;rsquo;t a feature for me for infra code), or try not to i.e., generate &lt;code&gt;YAMLs&lt;/code&gt; from a chart and use them. I try not use use too many Kubernetes operators or &lt;code&gt;CRDs&lt;/code&gt;, generally keeping things stock and primitive. Of course complexity is always difficult to manage, so compromises are made. Programatically generating Kubernetes manifests is a good engineering idea, but probably overkill for many teams.&lt;/p&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>/posts/kube-tricks/</guid>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
    </item>
    
    <item>
      <title>Changing Your PS1&#39;s Prompt Based on The Previous Command&#39;s Return Value</title>
      <link>/posts/ps1-colour/</link>
      <description>&lt;p&gt;You may find it useful for your PS1 to signal if a previous command returned &lt;code&gt;0&lt;/code&gt; or not. One neat way to do this that doesn&amp;rsquo;t add clutter is to have your PS1 change colour based on the previous command&amp;rsquo;s return value.&lt;/p&gt;
&lt;p&gt;I find that it also works well for scrollback, allowing me to at a quick glance where things went wrong. It can also draw attention to nonzero return values for programs that don&amp;rsquo;t properly signal that they didn&amp;rsquo;t properly exit to a user.&lt;/p&gt;
&lt;p&gt;Using the &lt;a href=&#34;https://man7.org/linux/man-pages/man4/console_codes.4.html&#34;&gt;man page for the console escape codes&lt;/a&gt; as reference, I wanted the &lt;code&gt;PS1&lt;/code&gt; to be &lt;code&gt;red&lt;/code&gt; or code &lt;code&gt;31&lt;/code&gt; when there is a nonzero return value, and green or &lt;code&gt;32&lt;/code&gt; for a zero return value.&lt;/p&gt;
&lt;p&gt;I also keep my &lt;code&gt;PS1&lt;/code&gt; prompt minimal being just a &lt;code&gt;$&lt;/code&gt; character, but it should be trivial to adapt your own prompt.&lt;/p&gt;
&lt;h2 id=&#34;setting-the-colours&#34;&gt;Setting the Colours &lt;a href=&#34;#setting-the-colours&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The green and red prompts for the &lt;code&gt;$&lt;/code&gt; character can be set like so&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# green prompt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PS1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\[\e[32m\]&lt;/span&gt;$&lt;span style=&#34;color:#e6db74&#34;&gt; \[\e[0m\]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# red prompt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PS1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\[\e[31m\]&lt;/span&gt;$&lt;span style=&#34;color:#e6db74&#34;&gt; \[\e[0m\]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\e&lt;/code&gt; is the escape sequence&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\e[0m&lt;/code&gt; resets the attributes to the default at the end of the prompt.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;\[&lt;/code&gt; and &lt;code&gt;\]&lt;/code&gt; are used to wrap non-printing control sequences (in our case the colour escape sequences), so word wrapping doesn&amp;rsquo;t break.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;colour-switching-on-return-value&#34;&gt;Colour Switching on Return Value &lt;a href=&#34;#colour-switching-on-return-value&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can use special shell variable &lt;code&gt;$?&lt;/code&gt; that gives us the return value of the last executed command. What we want is to return the string &lt;code&gt;32&lt;/code&gt; (green) if it&amp;rsquo;s zero, and &lt;code&gt;31&lt;/code&gt; (red) otherwise. Using bash conditionals, we can test this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $? &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; printf &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; printf &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $? &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; printf &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; printf &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;putting-it-together&#34;&gt;Putting it together &lt;a href=&#34;#putting-it-together&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inserting the conditional into the &lt;code&gt;PS1&lt;/code&gt; where the colour sequence number was as a subshell we have&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PS1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\[\e[$([[ $? = 0 ]] &amp;amp;&amp;amp; printf 32 || printf 31)m\]$ \[\e[0m\]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(Note that we use single quotes so that the subshell isn&amp;rsquo;t evaluated when setting the &lt;code&gt;PS1&lt;/code&gt; variable)&lt;/p&gt;
&lt;p&gt;Now whenever you run a command and it returns &lt;code&gt;0&lt;/code&gt; the prompt should be green, and if it&amp;rsquo;s nonzero the prompt will turn red.&lt;/p&gt;
</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>/posts/ps1-colour/</guid>
      <pubDate>Fri, 25 Jun 2021 21:17:06 +1000</pubDate>
    </item>
    
    <item>
      <title>Unix philosophy-esque approach to web tooling</title>
      <link>/posts/unix-web/</link>
      <description>&lt;p&gt;[Ongoing. I&amp;rsquo;ll be adding for snippets to this page that I find useful over time  &lt;a href=&#34;https://github.com/TheDen/thoughts.theden.sh&#34;&gt;Suggestions are also welcome&lt;/a&gt;]&lt;/p&gt;
&lt;h1 id=&#34;creating-webp-images&#34;&gt;Creating WebP images &lt;a href=&#34;#creating-webp-images&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;If you want to recursively create &lt;code&gt;.webp&lt;/code&gt; versions of images in a folder (same name, saved in same location, different extension name), this script will do that&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; IFS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read -r -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; file; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cwebp -q &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$file&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -o &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;file%.*&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.webp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;find ./ -type f &lt;span style=&#34;color:#ae81ff&#34;&gt;\(&lt;/span&gt; -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.png&amp;#34;&lt;/span&gt; -o -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.jpg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\)&lt;/span&gt; -print0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;cwebp&lt;/code&gt; binary from &lt;a href=&#34;https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html&#34;&gt;libwebp&lt;/a&gt; is required.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-q 90&lt;/code&gt; flag is the quality factor.&lt;/li&gt;
&lt;li&gt;The snippet assumes that image files are either &lt;code&gt;.jpg&lt;/code&gt; or &lt;code&gt;.png&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;deployment&#34;&gt;Deployment &lt;a href=&#34;#deployment&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Assuming you want &lt;code&gt;dist/&lt;/code&gt; to be the deployed folder&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsync -av . dist/ --exclude dist/ --exclude .git/ --exclude .gitignore
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and to push the folder as a specific git branch, for example to deploy it on GitHub pages&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git subtree push --prefix dist origin gh-pages
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;minification&#34;&gt;Minification &lt;a href=&#34;#minification&#34; class=&#34;hash g&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Using the &lt;a href=&#34;https://github.com/tdewolff/minify&#34;&gt;minify&lt;/a&gt; cli tool, this example snippet will minify any assets in the &lt;code&gt;dist/&lt;/code&gt; folder. Files that contain &lt;code&gt;.min&lt;/code&gt; will be excluded&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find ./dist/ -type f &lt;span style=&#34;color:#ae81ff&#34;&gt;\(&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.html&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -o -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*.js&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -o -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*.css&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -o -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*.svg&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -o -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.xml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -o -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -o -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.htm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -and ! -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.min*&amp;#34;&lt;/span&gt; -print0 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  xargs -0 -n1 -P4 -I &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt; sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;minify -o &amp;#34;{}&amp;#34; &amp;#34;{}&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author>
      <guid>/posts/unix-web/</guid>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
    </item>
    
  </channel>
</rss>
